{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","changedNote","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","console","log","JSON","stringify","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAaeA,EAXF,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,iBAEbC,EAAQF,EAAKG,UAAY,oBAAsB,iBACvD,OACE,qBAAIC,UAAU,OAAd,UAAsBJ,EAAKK,QAC3B,wBAAQC,QAASL,EAAjB,SAAoCC,QCNhCK,EAAU,aAiBC,EAfF,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIC,GAElB,OADgBR,IAAMS,IAAN,UAAaV,EAAb,YAAwBQ,GAAMC,GAC/BN,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCH9BM,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACK,KAIP,qBAAKf,UAAU,QAAf,SACGe,KCAHC,EAAQ,WAMd,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,MAGV,UACE,uBACA,2GAgFWC,EA3EH,SAACC,GACX,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,gBAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACTC,IAAqB3B,MAAK,SAAA4B,GACzBT,EAASS,QAER,IAEH,IAuCIC,EAAcP,EAAUJ,EAAOA,EAAMY,QAAO,SAAAxC,GAAI,OAAGA,EAAKG,aAE5D,OACE,gCACE,uCACA,cAAC,EAAD,CAAcgB,QAASe,IACvB,8BACE,yBAAQ5B,QAAS,kBAAK2B,GAAYD,IAAlC,kBACQA,EAAU,YAAc,WAGlC,6BAEGO,EAAYE,KAAI,SAAAzC,GAAI,OAAE,cAAC,EAAD,CAAoBA,KAAMA,EAAMC,iBAAkB,kBArCpD,SAACc,GAC1B,IAAMf,EAAO4B,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAE5B,KAAOA,KACtC6B,QAAQC,IAAIC,KAAKC,UAAU/C,GAAQ,cACnC,IAAMgB,EAAW,2BAAOhB,GAAP,IAAaG,WAAYH,EAAKG,YAC/CyC,QAAQC,IAAIC,KAAKC,UAAU/B,GAAe,cAC1CqB,EAAmBtB,EAAIC,GAAaN,MAAK,SAAAsC,GACxCnB,EAASD,EAAMa,KAAI,SAAAzC,GAAI,OAAIA,EAAKe,KAAOA,EAAKf,EAAOgD,MAClDJ,QAAQC,IAAIC,KAAKC,UAAUC,GAAe,mBACzCC,OAAM,SAAAC,GACPf,EAAgB,SAAD,OACJe,EADI,sCAGfC,YAAW,WACThB,EAAgB,QACf,QAuB6EiB,CAAmBpD,EAAKe,MAApEf,EAAKe,SAEzC,uBAAMsC,SAtDM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBnD,QAASyB,EACV2B,MAAM,IAAIC,MAAOC,cACjBxD,UAAWyD,KAAKC,SAAW,IAG7BxB,EAAmBmB,GAAY9C,MAAK,SAAAsC,GACnCnB,EAASD,EAAMkC,OAAOd,IACrBjB,EAAW,QA4CV,UACA,uBAAOgC,MAASjC,EAASkC,SArBJ,SAACV,GAC1BV,QAAQC,IAAIS,EAAMW,OAAOF,OACzBhC,EAAWuB,EAAMW,OAAOF,UAoBpB,wBAAQG,KAAK,SAAb,qBAEA,cAAC,EAAD,Q,MC3DNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.94ded6e6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({note, toggleImportance}) =>{\r\n\r\n  const label = note.important ? 'make to important' : 'make important'\r\nreturn (\r\n  <li className='note'>{note.content}\r\n  <button onClick={toggleImportance}>{label}</button>\r\n  </li>\r\n)\r\n}\r\n\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n  }\r\n\r\n  const create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n\r\n  const update = (id, changedNote) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, changedNote)\r\n    return request.then(response => response.data)\r\n  }\r\n\r\n  export default { getAll, create, update }","const Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Notification","import React, { useEffect } from 'react'\nimport { useState } from 'react'\nimport axios from 'axios'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\n\nconst Footer =() =>{\nconst footerStyle = {\n  color: 'green',\n  fontStyle: 'italic',\n  fontSize: '16'\n}\nreturn (\n  <div style = {footerStyle}>\n    <br/>\n    <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\n  </div>\n)\n}\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('a new note..')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(()=>{\n   noteService.getAll().then(initialNotes => {\n    setNotes(initialNotes)\n    })\n  }, [])\n \n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n     date: new Date().toISOString(),\n     important: Math.random() > 0.5,\n     \n   }\n   noteService.create(noteObject).then(returnedNote => {\n    setNotes(notes.concat(returnedNote))\n     setNewNote('')\n   })\n   \n \n  }\n  const toggleImportanceOf = (id) =>{\n    const note = notes.find(n => n.id === id)\n    console.log(JSON.stringify(note) + '1st cnsole')\n    const changedNote = {...note, important: !note.important}\n    console.log(JSON.stringify(changedNote) + '2nd cnsole')\n    noteService.update(id, changedNote).then(returnedNote => {\n     setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      console.log(JSON.stringify(returnedNote) +' 3rd console' )\n    }).catch(error => {\n      setErrorMessage(\n        `Note '${error}' was already removed from server`\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n     \n    })\n  }\n  \n  const handleNoteChange = (event) =>{\n  console.log(event.target.value)\n  setNewNote(event.target.value)\n  }\n  \nconst notesToShow = showAll ? notes: notes.filter(note=> note.important)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={()=> setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        \n       { notesToShow.map(note=><Note key={note.id} note={note} toggleImportance={()=> toggleImportanceOf(note.id)}/>)}\n      </ul>\n      <form onSubmit= {addNote}>\n      <input value = {newNote} onChange= {handleNoteChange }/>\n      <button type='submit'>Save</button>\n      </form>\n      <Footer/>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\n\n\n\n\n\n/*\nconst notes = [\n  {\n    id: 1,\n    content: 'HTML is easy',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true\n  },\n  {\n    id: 2,\n    content: 'Browser can execute only JavaScript',\n    date: '2019-05-30T18:39:34.091Z',\n    important: false\n  },\n  {\n    id: 3,\n    content: 'GET and POST are the most important methods of HTTP protocol',\n    date: '2019-05-30T19:20:14.298Z',\n    important: true\n  }\n]\n*/\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}